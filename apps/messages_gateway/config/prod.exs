use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# MessagesGatewayWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :messages_gateway, MessagesGatewayWeb.Endpoint,
  load_from_system_env: true,
  load_from_system_env: true,
  http: [port: System.get_env("PORT") |> String.to_integer() ],
  url: [
    host: System.get_env("HOST"),
    port: System.get_env("PORT") |> String.to_integer()
  ],
  debug_errors: false,
  code_reloader: false

config :messages_gateway, MessagesGatewayWeb.RedisManager,
       database: System.get_env("REDIS_NAME"),
       password: System.get_env("REDIS_PASSWORD"),
       host: System.get_env("REDIS_HOST"),
       port: System.get_env("REDIS_PORT") |> String.to_integer(),
       pool_size: System.get_env("REDIS_POOL_SIZE") |> String.to_integer()


config :messages_gateway,
       namespace: System.get_env("MQ_NAMESPACE"),
       mq_host:  System.get_env("MQ_HOST"),
       mq_port:  System.get_env( "MQ_PORT") |> String.to_integer(),
       resend_timeout: System.get_env("MQ_RESEND_TIMEOUT") |> String.to_integer()